rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows creating, reading, updating, and deleting team documents.
     * @path /teams/{teamId}
     */
    match /teams/{teamId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages user documents within a team.
     * @path /teams/{teamId}/users/{userId}
     */
    match /teams/{teamId}/users/{userId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId) && request.resource.data.teamId == teamId && request.resource.data.id == userId;
      allow update: if isSignedIn() && isTeamMember(teamId) && resource.data.teamId == teamId;
      allow delete: if isSignedIn() && isTeamMember(teamId) && resource.data.teamId == teamId;
    }

    /**
     * @description Manages company documents within a team.
     * @path /teams/{teamId}/companies/{companyId}
     */
    match /teams/{teamId}/companies/{companyId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId) && request.resource.data.teamId == teamId;
      allow update: if isSignedIn() && isTeamMember(teamId) && resource.data.teamId == teamId;
      allow delete: if isSignedIn() && isTeamMember(teamId) && resource.data.teamId == teamId;
    }

    /**
     * @description Manages contact documents within a team.
     * @path /teams/{teamId}/contacts/{contactId}
     */
    match /teams/{teamId}/contacts/{contactId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId) && request.resource.data.teamId == teamId;
      allow update: if isSignedIn() && isTeamMember(teamId) && resource.data.teamId == teamId;
      allow delete: if isSignedIn() && isTeamMember(teamId) && resource.data.teamId == teamId;
    }

    /**
     * @description Manages pipeline documents within a team.
     * @path /teams/{teamId}/pipelines/{pipelineId}
     */
    match /teams/{teamId}/pipelines/{pipelineId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId) && request.resource.data.teamId == teamId;
      allow update: if isSignedIn() && isTeamMember(teamId) && resource.data.teamId == teamId;
      allow delete: if isSignedIn() && isTeamMember(teamId) && resource.data.teamId == teamId;
    }

    /**
     * @description Manages stage documents within a pipeline.
     * @path /teams/{teamId}/pipelines/{pipelineId}/stages/{stageId}
     */
    match /teams/{teamId}/pipelines/{pipelineId}/stages/{stageId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId) && request.resource.data.teamId == teamId && request.resource.data.pipelineId == pipelineId;
      allow update: if isSignedIn() && isTeamMember(teamId) && resource.data.teamId == teamId && resource.data.pipelineId == pipelineId;
      allow delete: if isSignedIn() && isTeamMember(teamId) && resource.data.teamId == teamId && resource.data.pipelineId == pipelineId;
    }

    /**
     * @description Manages deal documents within a team.
     * @path /teams/{teamId}/deals/{dealId}
     */
    match /teams/{teamId}/deals/{dealId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId) && request.resource.data.teamId == teamId;
      allow update: if isSignedIn() && isTeamMember(teamId) && resource.data.teamId == teamId;
      allow delete: if isSignedIn() && isTeamMember(teamId) && resource.data.teamId == teamId;
    }

    /**
     * @description Manages activity documents within a team.
     * @path /teams/{teamId}/activities/{activityId}
     */
    match /teams/{teamId}/activities/{activityId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId) && request.resource.data.teamId == teamId;
      allow update: if isSignedIn() && isTeamMember(teamId) && resource.data.teamId == teamId;
      allow delete: if isSignedIn() && isTeamMember(teamId) && resource.data.teamId == teamId;
    }

    /**
     * @description Manages message documents within a team.
     * @path /teams/{teamId}/messages/{messageId}
     */
    match /teams/{teamId}/messages/{messageId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId) && request.resource.data.teamId == teamId;
      allow update: if isSignedIn() && isTeamMember(teamId) && resource.data.teamId == teamId;
      allow delete: if isSignedIn() && isTeamMember(teamId) && resource.data.teamId == teamId;
    }

    /**
     * @description Manages channel documents within a team.
     * @path /teams/{teamId}/channels/{channelId}
     */
    match /teams/{teamId}/channels/{channelId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId) && request.resource.data.teamId == teamId;
      allow update: if isSignedIn() && isTeamMember(teamId) && resource.data.teamId == teamId;
      allow delete: if isSignedIn() && isTeamMember(teamId) && resource.data.teamId == teamId;
    }

    /**
     * @description Manages webhook documents within a team.
     * @path /teams/{teamId}/webhooks/{webhookId}
     */
    match /teams/{teamId}/webhooks/{webhookId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId) && request.resource.data.teamId == teamId;
      allow update: if isSignedIn() && isTeamMember(teamId) && resource.data.teamId == teamId;
      allow delete: if isSignedIn() && isTeamMember(teamId) && resource.data.teamId == teamId;
    }

    /**
     * @description Manages job documents within a team.
     * @path /teams/{teamId}/jobs/{jobId}
     */
    match /teams/{teamId}/jobs/{jobId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId) && request.resource.data.teamId == teamId;
      allow update: if isSignedIn() && isTeamMember(teamId) && resource.data.teamId == teamId;
      allow delete: if isSignedIn() && isTeamMember(teamId) && resource.data.teamId == teamId;
    }

    /**
     * @description Manages social post documents within a team.
     * @path /teams/{teamId}/socialPosts/{socialPostId}
     */
    match /teams/{teamId}/socialPosts/{socialPostId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId) && request.resource.data.teamId == teamId;
      allow update: if isSignedIn() && isTeamMember(teamId) && resource.data.teamId == teamId;
      allow delete: if isSignedIn() && isTeamMember(teamId) && resource.data.teamId == teamId;
    }

    //---------------- Helper functions -----------------------

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is a member of the specified team.
     * @param {string} teamId - The ID of the team.
     * @return {boolean} True if the user is a member of the team, false otherwise.
     */
    function isTeamMember(teamId) {
      return isSignedIn() && request.auth.uid == teamId;
    }
  }
}