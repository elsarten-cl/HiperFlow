rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's team ID matches the document's team ID.
     * @param {string} teamId - The team ID to check against.
     * @returns {boolean} True if the user is in the same team as the document, false otherwise.
     */
    function isTeamMember(teamId) {
        return isSignedIn() && request.auth.uid != null && get(/databases/$(database)/documents/teams/$(teamId)).data.exists;
    }

    /**
     * @description Checks if the document exists and the user is a team member.
     * @param {string} teamId - The team ID to check against.
     * @returns {boolean} True if the document exists and the user is a team member, false otherwise.
     */
    function isExistingTeamMember(teamId) {
      return resource.data.teamId == teamId && isTeamMember(teamId);
    }

    /**
     * @description Security rules for the /teams collection.
     * @path /teams/{teamId}
     * @allow (create) - Any authenticated user can create a team.
     * @deny (create) - Request without authentication
     * @principle Allows authenticated users to create teams and restricts listing to members
     */
    match /teams/{teamId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for the /users collection.
     * @path /users/{userId}
     * @allow (create) - Any authenticated user can create their own user document.
     * @deny (create) - Request without authentication or mismatched user ID.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if request.auth.uid == userId;
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if false;
    }

    /**
     * @description Security rules for the /companies collection.
     * @path /companies/{companyId}
     * @allow (create) - Any authenticated user can create a company.
     * @deny (create) - Request without authentication or mismatched team ID.
     * @principle Enforces team-based ownership for writes.
     */
    match /companies/{companyId} {
      allow get: if isSignedIn() && isExistingTeamMember(resource.data.teamId);
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isTeamMember(request.resource.data.teamId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for the /contacts collection.
     * @path /contacts/{contactId}
     * @allow (create) - Any authenticated user can create a contact.
     * @deny (create) - Request without authentication or mismatched team ID.
     * @principle Enforces team-based ownership for writes.
     */
    match /contacts/{contactId} {
      allow get: if isSignedIn() && isExistingTeamMember(resource.data.teamId);
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isTeamMember(request.resource.data.teamId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for the /pipelines collection.
     * @path /pipelines/{pipelineId}
     * @allow (create) - Any authenticated user can create a pipeline.
     * @deny (create) - Request without authentication or mismatched team ID.
     * @principle Enforces team-based ownership for writes.
     */
    match /pipelines/{pipelineId} {
      allow get: if isSignedIn() && isExistingTeamMember(resource.data.teamId);
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isTeamMember(request.resource.data.teamId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for the /stages collection.
     * @path /stages/{stageId}
     * @allow (create) - Any authenticated user can create a stage.
     * @deny (create) - Request without authentication or mismatched pipeline ID.
     * @principle Enforces team-based ownership for writes.
     */
    match /stages/{stageId} {
      allow get: if isSignedIn() && isExistingTeamMember(resource.data.teamId);
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isTeamMember(request.resource.data.teamId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for the /deals collection.
     * @path /deals/{dealId}
     * @allow (create) - Any authenticated user can create a deal.
     * @deny (create) - Request without authentication or mismatched team ID.
     * @principle Enforces team-based ownership for writes.
     */
    match /deals/{dealId} {
      allow get: if isSignedIn() && isExistingTeamMember(resource.data.teamId);
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isTeamMember(request.resource.data.teamId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for the /activities collection.
     * @path /activities/{activityId}
     * @allow (create) - Any authenticated user can create an activity.
     * @deny (create) - Request without authentication or mismatched team ID.
     * @principle Enforces team-based ownership for writes.
     */
    match /activities/{activityId} {
      allow get: if isSignedIn() && isExistingTeamMember(resource.data.teamId);
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isTeamMember(request.resource.data.teamId);
      allow update: if false;
      allow delete: if false;
    }

   /**
     * @description Security rules for the /automation_outbox collection.
     * @path /automation_outbox/{eventId}
     */
    match /automation_outbox/{eventId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for the /messages collection.
     * @path /messages/{messageId}
     */
    match /messages/{messageId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for the /channels collection.
     * @path /channels/{channelId}
     */
    match /channels/{channelId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for the /webhooks collection.
     * @path /webhooks/{webhookId}
     */
    match /webhooks/{webhookId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for the /jobs collection.
     * @path /jobs/{jobId}
     */
    match /jobs/{jobId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for the /socialPosts collection.
     * @path /socialPosts/{socialPostId}
     */
    match /socialPosts/{socialPostId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for the /tasks collection.
     * @path /tasks/{taskId}
     */
    match /tasks/{taskId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for the /automations collection.
     * @path /automations/{automationId}
     */
    match /automations/{automationId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for the /clientProfiles collection.
     * @path /clientProfiles/{clientProfileId}
     */
    match /clientProfiles/{clientProfileId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
   /**
     * @description Security rules for the /dao_proposals collection.
     * @path /dao_proposals/{proposalId}
     */
    match /dao_proposals/{proposalId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for the /dao_votes collection.
     * @path /dao_votes/{voteId}
     */
    match /dao_votes/{voteId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for the /dao_decisions collection.
     * @path /dao_decisions/{decisionId}
     */
    match /dao_decisions/{decisionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
    /**
     * @description Security rules for the /infra_usage collection.
     * @path /infra_usage/{usageId}
     */
    match /infra_usage/{usageId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for the /infra_logs collection.
     * @path /infra_logs/{logId}
     */
    match /infra_logs/{logId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}