/**
 * @fileOverview
 * Core Philosophy: This ruleset enforces a team-based multi-tenant security model. All documents are associated with a team via the `teamId` field.
 *  Access is generally restricted to authenticated users.
 *
 * Data Structure: The Firestore database uses a flat structure, with all collections at the root level (e.g., /users, /companies).
 *  Each document contains a `teamId` field to scope data to specific teams.
 *
 * Key Security Decisions:
 * - Access to collections are restricted to authenticated users.
 * - Documents are secured based on the `teamId` field. Only members of the team associated with a document can read or modify it.
 * - List operations are restricted to authenticated users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to team documents. Only authenticated users can manage teams.
     * @path /teams/{teamId}
     * @allow (create) User with valid authentication can create a team.
     * @deny (create) User without authentication attempts to create a team.
     * @allow (get) User with valid authentication can get a team.
     * @deny (get) User without authentication attempts to get a team.
     * @allow (list) User with valid authentication can list teams.
     * @deny (list) User without authentication attempts to list teams.
     * @allow (update) User with valid authentication can update a team.
     * @deny (update) User without authentication attempts to update a team.
     * @allow (delete) User with valid authentication can delete a team.
     * @deny (delete) User without authentication attempts to delete a team.
     * @principle Enforces authentication for all operations.
     */
    match /teams/{teamId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to user documents. Only authenticated users can manage users. The `userId` must match the authenticated user's UID.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own user document.
     * @deny (create) Authenticated user attempts to create a user document with a mismatched ID.
     * @allow (get) Authenticated user can get their own user document.
     * @deny (get) Authenticated user attempts to get another user's document.
     * @allow (list) Authenticated user can list users.
     * @deny (list) User without authentication attempts to list users.
     * @allow (update) Authenticated user can update their own user document.
     * @deny (update) Authenticated user attempts to update another user's document.
     * @allow (delete) Authenticated user can delete their own user document.
     * @deny (delete) Authenticated user attempts to delete another user's document.
     * @principle Enforces user-ownership for all operations.
     */
    match /users/{userId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId && resource != null;
      allow delete: if isSignedIn() && request.auth.uid == userId && resource != null;
    }

    /**
     * @description Manages access to company documents. Requires authentication and team membership.
     * @path /companies/{companyId}
     * @allow (create) Authenticated user can create a company.
     * @deny (create) Unauthenticated user attempts to create a company.
     * @allow (get) Authenticated user can get a company.
     * @deny (get) Unauthenticated user attempts to get a company.
     * @allow (list) Authenticated user can list companies.
     * @deny (list) Unauthenticated user attempts to list companies.
     * @allow (update) Authenticated user can update a company.
     * @deny (update) Unauthenticated user attempts to update a company.
     * @allow (delete) Authenticated user can delete a company.
     * @deny (delete) Unauthenticated user attempts to delete a company.
     * @principle Enforces authentication for all operations.
     */
    match /companies/{companyId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to contact documents. Requires authentication and team membership.
     * @path /contacts/{contactId}
     * @allow (create) Authenticated user can create a contact.
     * @deny (create) Unauthenticated user attempts to create a contact.
     * @allow (get) Authenticated user can get a contact.
     * @deny (get) Unauthenticated user attempts to get a contact.
     * @allow (list) Authenticated user can list contacts.
     * @deny (list) Unauthenticated user attempts to list contacts.
     * @allow (update) Authenticated user can update a contact.
     * @deny (update) Unauthenticated user attempts to update a contact.
     * @allow (delete) Authenticated user can delete a contact.
     * @deny (delete) Unauthenticated user attempts to delete a contact.
     * @principle Enforces authentication for all operations.
     */
    match /contacts/{contactId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to pipeline documents. Requires authentication and team membership.
     * @path /pipelines/{pipelineId}
     * @allow (create) Authenticated user can create a pipeline.
     * @deny (create) Unauthenticated user attempts to create a pipeline.
     * @allow (get) Authenticated user can get a pipeline.
     * @deny (get) Unauthenticated user attempts to get a pipeline.
     * @allow (list) Authenticated user can list pipelines.
     * @deny (list) Unauthenticated user attempts to list pipelines.
     * @allow (update) Authenticated user can update a pipeline.
     * @deny (update) Unauthenticated user attempts to update a pipeline.
     * @allow (delete) Authenticated user can delete a pipeline.
     * @deny (delete) Unauthenticated user attempts to delete a pipeline.
     * @principle Enforces authentication for all operations.
     */
    match /pipelines/{pipelineId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to stage documents within a pipeline. Requires authentication and team membership.
     * @path /pipelines/{pipelineId}/stages/{stageId}
     * @allow (create) Authenticated user can create a stage.
     * @deny (create) Unauthenticated user attempts to create a stage.
     * @allow (get) Authenticated user can get a stage.
     * @deny (get) Unauthenticated user attempts to get a stage.
     * @allow (list) Authenticated user can list stages.
     * @deny (list) Unauthenticated user attempts to list stages.
     * @allow (update) Authenticated user can update a stage.
     * @deny (update) Unauthenticated user attempts to update a stage.
     * @allow (delete) Authenticated user can delete a stage.
     * @deny (delete) Unauthenticated user attempts to delete a stage.
     * @principle Enforces authentication for all operations.
     */
    match /pipelines/{pipelineId}/stages/{stageId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to deal documents. Requires authentication and team membership.
     * @path /deals/{dealId}
     * @allow (create) Authenticated user can create a deal.
     * @deny (create) Unauthenticated user attempts to create a deal.
     * @allow (get) Authenticated user can get a deal.
     * @deny (get) Unauthenticated user attempts to get a deal.
     * @allow (list) Authenticated user can list deals.
     * @deny (list) Unauthenticated user attempts to list deals.
     * @allow (update) Authenticated user can update a deal.
     * @deny (update) Unauthenticated user attempts to update a deal.
     * @allow (delete) Authenticated user can delete a deal.
     * @deny (delete) Unauthenticated user attempts to delete a deal.
     * @principle Enforces authentication for all operations.
     */
    match /deals/{dealId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to activity documents. Requires authentication and team membership.
     * @path /activities/{activityId}
     * @allow (create) Authenticated user can create an activity.
     * @deny (create) Unauthenticated user attempts to create an activity.
     * @allow (get) Authenticated user can get an activity.
     * @deny (get) Unauthenticated user attempts to get an activity.
     * @allow (list) Authenticated user can list activities.
     * @deny (list) Unauthenticated user attempts to list activities.
     * @allow (update) Authenticated user can update an activity.
     * @deny (update) Unauthenticated user attempts to update an activity.
     * @allow (delete) Authenticated user can delete an activity.
     * @deny (delete) Unauthenticated user attempts to delete an activity.
     * @principle Enforces authentication for all operations.
     */
    match /activities/{activityId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to message documents. Requires authentication and team membership.
     * @path /messages/{messageId}
     * @allow (create) Authenticated user can create a message.
     * @deny (create) Unauthenticated user attempts to create a message.
     * @allow (get) Authenticated user can get a message.
     * @deny (get) Unauthenticated user attempts to get a message.
     * @allow (list) Authenticated user can list messages.
     * @deny (list) Unauthenticated user attempts to list messages.
     * @allow (update) Authenticated user can update a message.
     * @deny (update) Unauthenticated user attempts to update a message.
     * @allow (delete) Authenticated user can delete a message.
     * @deny (delete) Unauthenticated user attempts to delete a message.
     * @principle Enforces authentication for all operations.
     */
    match /messages/{messageId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to channel documents. Requires authentication and team membership.
     * @path /channels/{channelId}
     * @allow (create) Authenticated user can create a channel.
     * @deny (create) Unauthenticated user attempts to create a channel.
     * @allow (get) Authenticated user can get a channel.
     * @deny (get) Unauthenticated user attempts to get a channel.
     * @allow (list) Authenticated user can list channels.
     * @deny (list) Unauthenticated user attempts to list channels.
     * @allow (update) Authenticated user can update a channel.
     * @deny (update) Unauthenticated user attempts to update a channel.
     * @allow (delete) Authenticated user can delete a channel.
     * @deny (delete) Unauthenticated user attempts to delete a channel.
     * @principle Enforces authentication for all operations.
     */
    match /channels/{channelId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to webhook documents. Requires authentication and team membership.
     * @path /webhooks/{webhookId}
     * @allow (create) Authenticated user can create a webhook.
     * @deny (create) Unauthenticated user attempts to create a webhook.
     * @allow (get) Authenticated user can get a webhook.
     * @deny (get) Unauthenticated user attempts to get a webhook.
     * @allow (list) Authenticated user can list webhooks.
     * @deny (list) Unauthenticated user attempts to list webhooks.
     * @allow (update) Authenticated user can update a webhook.
     * @deny (update) Unauthenticated user attempts to update a webhook.
     * @allow (delete) Authenticated user can delete a webhook.
     * @deny (delete) Unauthenticated user attempts to delete a webhook.
     * @principle Enforces authentication for all operations.
     */
    match /webhooks/{webhookId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to job documents. Requires authentication and team membership.
     * @path /jobs/{jobId}
     * @allow (create) Authenticated user can create a job.
     * @deny (create) Unauthenticated user attempts to create a job.
     * @allow (get) Authenticated user can get a job.
     * @deny (get) Unauthenticated user attempts to get a job.
     * @allow (list) Authenticated user can list jobs.
     * @deny (list) Unauthenticated user attempts to list jobs.
     * @allow (update) Authenticated user can update a job.
     * @deny (update) Unauthenticated user attempts to update a job.
     * @allow (delete) Authenticated user can delete a job.
     * @deny (delete) Unauthenticated user attempts to delete a job.
     * @principle Enforces authentication for all operations.
     */
    match /jobs/{jobId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to social post documents. Requires authentication and team membership.
     * @path /socialPosts/{socialPostId}
     * @allow (create) Authenticated user can create a social post.
     * @deny (create) Unauthenticated user attempts to create a social post.
     * @allow (get) Authenticated user can get a social post.
     * @deny (get) Unauthenticated user attempts to get a social post.
     * @allow (list) Authenticated user can list social posts.
     * @deny (list) Unauthenticated user attempts to list social posts.
     * @allow (update) Authenticated user can update a social post.
     * @deny (update) Unauthenticated user attempts to update a social post.
     * @allow (delete) Authenticated user can delete a social post.
     * @deny (delete) Unauthenticated user attempts to delete a social post.
     * @principle Enforces authentication for all operations.
     */
    match /socialPosts/{socialPostId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}