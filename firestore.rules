/**
 * @fileOverview Firestore Security Rules for HiperFlow CRM.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant data model where each document belongs to a team. Access is granted based on the user's team membership.
 * To mitigate Firestore permission errors due to complex nested paths (suspected root cause), all collections are now at the root level.
 *
 * Data Structure:
 * All entities (e.g., users, companies, contacts, tasks) are stored in separate, top-level collections.
 * Each document contains a `teamId` field indicating the team it belongs to.
 *
 * Key Security Decisions:
 * - All read and write operations are restricted to authenticated users.
 * - Listing of documents is generally allowed to members of the team.
 *
 * Denormalization for Authorization:
 * All documents contain a `teamId` field. This is used to determine if the user is authorized to access the document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication is required for all operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is a member of the team.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authorization based on team membership.
     */
    function isTeamMember(teamId) {
      return isSignedIn() && request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == teamId;
    }

    /**
     * @description Checks if the document exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Prevents operations on non-existent documents.
     */
    function isExisting() {
        return resource != null;
    }


    /**
     * @description Rule for the /teams collection.
     * @path /teams/{teamId}
     * @allow (get) Authenticated user can get a team document.
     * @allow (list) Authenticated user can list teams.
     * @allow (create) Authenticated user can create a team document.
     * @allow (update) Authenticated user can update a team document.
     * @allow (delete) Authenticated user can delete a team document.
     * @deny (get) Unauthenticated user cannot get a team document.
     * @deny (list) Unauthenticated user cannot list teams.
     * @deny (create) Unauthenticated user cannot create a team document.
     * @deny (update) Unauthenticated user cannot update a team document.
     * @deny (delete) Unauthenticated user cannot delete a team document.
     * @principle Requires authentication for all operations.
     */
    match /teams/{teamId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isExisting();
      allow delete: if isSignedIn() && isExisting();
    }

    /**
     * @description Rule for the /users collection.
     * @path /users/{userId}
     * @allow (get) Authenticated user can get their own user document.
     * @allow (list) Authenticated user can list users.
     * @allow (create) Authenticated user can create their own user document.
     * @allow (update) Authenticated user can update their own user document.
     * @allow (delete) Authenticated user can delete their own user document.
     * @deny (get) Unauthenticated user cannot get a user document.
     * @deny (list) Unauthenticated user cannot list users.
     * @deny (create) Unauthenticated user cannot create a user document with a mismatched userId.
     * @deny (update) Unauthenticated user cannot update a user document with a mismatched userId.
     * @deny (delete) Unauthenticated user cannot delete a user document with a mismatched userId.
     * @principle Enforces user-ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow list: if false; // Listing users is generally not safe.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId && isExisting();
      allow delete: if isSignedIn() && request.auth.uid == userId && isExisting();
    }

    /**
     * @description Rule for the /companies collection.
     * @path /companies/{companyId}
     * @allow (get) Authenticated team member can get a company document.
     * @allow (list) Authenticated team member can list companies.
     * @allow (create) Authenticated team member can create a company document.
     * @allow (update) Authenticated team member can update a company document.
     * @allow (delete) Authenticated team member can delete a company document.
     * @deny (get) Unauthenticated user cannot get a company document.
     * @deny (list) Unauthenticated user cannot list companies.
     * @deny (create) Unauthenticated user cannot create a company document with a mismatched teamId.
     * @deny (update) Unauthenticated user cannot update a company document with a mismatched teamId.
     * @deny (delete) Unauthenticated user cannot delete a company document with a mismatched teamId.
     * @principle Enforces team-based access control for all operations.
     */
    match /companies/{companyId} {
      allow get: if isSignedIn() && isTeamMember(resource.data.teamId);
      allow list: if isSignedIn() && isTeamMember(request.query.data.teamId); //Requires teamId query
      allow create: if isSignedIn() && isTeamMember(request.resource.data.teamId);
      allow update: if isSignedIn() && isTeamMember(resource.data.teamId) && isExisting();
      allow delete: if isSignedIn() && isTeamMember(resource.data.teamId) && isExisting();
    }

    /**
     * @description Rule for the /contacts collection.
     * @path /contacts/{contactId}
     * @allow (get) Authenticated team member can get a contact document.
     * @allow (list) Authenticated team member can list contacts.
     * @allow (create) Authenticated team member can create a contact document.
     * @allow (update) Authenticated team member can update a contact document.
     * @allow (delete) Authenticated team member can delete a contact document.
     * @deny (get) Unauthenticated user cannot get a contact document.
     * @deny (list) Unauthenticated user cannot list contacts.
     * @deny (create) Unauthenticated user cannot create a contact document with a mismatched teamId.
     * @deny (update) Unauthenticated user cannot update a contact document with a mismatched teamId.
     * @deny (delete) Unauthenticated user cannot delete a contact document with a mismatched teamId.
     * @principle Enforces team-based access control for all operations.
     */
    match /contacts/{contactId} {
      allow get: if isSignedIn() && isTeamMember(resource.data.teamId);
      allow list: if isSignedIn() && isTeamMember(request.query.data.teamId); //Requires teamId query
      allow create: if isSignedIn() && isTeamMember(request.resource.data.teamId);
      allow update: if isSignedIn() && isTeamMember(resource.data.teamId) && isExisting();
      allow delete: if isSignedIn() && isTeamMember(resource.data.teamId) && isExisting();
    }

    /**
     * @description Rule for the /pipelines collection.
     * @path /pipelines/{pipelineId}
     * @allow (get) Authenticated team member can get a pipeline document.
     * @allow (list) Authenticated team member can list pipelines.
     * @allow (create) Authenticated team member can create a pipeline document.
     * @allow (update) Authenticated team member can update a pipeline document.
     * @allow (delete) Authenticated team member can delete a pipeline document.
     * @deny (get) Unauthenticated user cannot get a pipeline document.
     * @deny (list) Unauthenticated user cannot list pipelines.
     * @deny (create) Authenticated user cannot create a pipeline document with mismatched teamId.
     * @deny (update) Authenticated user cannot update a pipeline document with mismatched teamId.
     * @deny (delete) Authenticated user cannot delete a pipeline document with mismatched teamId.
     * @principle Enforces team-based access control for all operations.
     */
    match /pipelines/{pipelineId} {
      allow get: if isSignedIn() && isTeamMember(resource.data.teamId);
      allow list: if isSignedIn() && isTeamMember(request.query.data.teamId); //Requires teamId query
      allow create: if isSignedIn() && isTeamMember(request.resource.data.teamId);
      allow update: if isSignedIn() && isTeamMember(resource.data.teamId) && isExisting();
      allow delete: if isSignedIn() && isTeamMember(resource.data.teamId) && isExisting();
    }

    /**
     * @description Rule for the /pipelines/{pipelineId}/stages collection.
     * @path /pipelines/{pipelineId}/stages/{stageId}
     * @allow (get) Authenticated team member can get a stage document if they are on the team for the related pipeline.
     * @allow (list) Authenticated team member can list stage documents if they are on the team for the related pipeline.
     * @allow (create) Authenticated team member can create a stage document if they are on the team for the related pipeline.
     * @allow (update) Authenticated team member can update a stage document if they are on the team for the related pipeline.
     * @allow (delete) Authenticated team member can delete a stage document if they are on the team for the related pipeline.
     * @deny (get) Unauthenticated user cannot get a stage document.
     * @deny (list) Unauthenticated user cannot list stage documents.
     * @deny (create) Authenticated user cannot create a stage document with mismatched teamId.
     * @deny (update) Authenticated user cannot update a stage document with mismatched teamId.
     * @deny (delete) Authenticated user cannot delete a stage document with mismatched teamId.
     * @principle Enforces team-based access control for all operations.
     */
    match /pipelines/{pipelineId}/stages/{stageId} {
      allow get: if isSignedIn() && isTeamMember(get(/databases/$(database)/documents/pipelines/$(pipelineId)).data.teamId);
      allow list: if isSignedIn() && isTeamMember(get(/databases/$(database)/documents/pipelines/$(pipelineId)).data.teamId);
      allow create: if isSignedIn() && isTeamMember(get(/databases/$(database)/documents/pipelines/$(pipelineId)).data.teamId);
      allow update: if isSignedIn() && isTeamMember(get(/databases/$(database)/documents/pipelines/$(pipelineId)).data.teamId) && isExisting();
      allow delete: if isSignedIn() && isTeamMember(get(/databases/$(database)/documents/pipelines/$(pipelineId)).data.teamId) && isExisting();
    }

    /**
     * @description Rule for the /deals collection.
     * @path /deals/{dealId}
     * @allow (get) Authenticated team member can get a deal document.
     * @allow (list) Authenticated team member can list deals.
     * @allow (create) Authenticated team member can create a deal document.
     * @allow (update) Authenticated team member can update a deal document.
     * @allow (delete) Authenticated team member can delete a deal document.
     * @deny (get) Unauthenticated user cannot get a deal document.
     * @deny (list) Unauthenticated user cannot list deals.
     * @deny (create) Authenticated user cannot create a deal document with mismatched teamId.
     * @deny (update) Authenticated user cannot update a deal document with mismatched teamId.
     * @deny (delete) Authenticated user cannot delete a deal document with mismatched teamId.
     * @principle Enforces team-based access control for all operations.
     */
    match /deals/{dealId} {
      allow get: if isSignedIn() && isTeamMember(resource.data.teamId);
      allow list: if isSignedIn() && isTeamMember(request.query.data.teamId); //Requires teamId query
      allow create: if isSignedIn() && isTeamMember(request.resource.data.teamId);
      allow update: if isSignedIn() && isTeamMember(resource.data.teamId) && isExisting();
      allow delete: if isSignedIn() && isTeamMember(resource.data.teamId) && isExisting();
    }

    /**
     * @description Rule for the /activities collection.
     * @path /activities/{activityId}
     * @allow (get) Authenticated team member can get an activity document.
     * @allow (list) Authenticated team member can list activities.
     * @allow (create) Authenticated team member can create an activity document.
     * @allow (update) Authenticated team member can update an activity document.
     * @allow (delete) Authenticated team member can delete an activity document.
     * @deny (get) Unauthenticated user cannot get an activity document.
     * @deny (list) Unauthenticated user cannot list activities.
     * @deny (create) Authenticated user cannot create an activity document with mismatched teamId.
     * @deny (update) Authenticated user cannot update an activity document with mismatched teamId.
     * @deny (delete) Authenticated user cannot delete an activity document with mismatched teamId.
     * @principle Enforces team-based access control for all operations.
     */
    match /activities/{activityId} {
      allow get: if isSignedIn() && isTeamMember(resource.data.teamId);
      allow list: if isSignedIn() && isTeamMember(request.query.data.teamId); //Requires teamId query
      allow create: if isSignedIn() && isTeamMember(request.resource.data.teamId);
      allow update: if isSignedIn() && isTeamMember(resource.data.teamId) && isExisting();
      allow delete: if isSignedIn() && isTeamMember(resource.data.teamId) && isExisting();
    }

    /**
     * @description Rule for the /messages collection.
     * @path /messages/{messageId}
     * @allow (get) Authenticated team member can get a message document.
     * @allow (list) Authenticated team member can list messages.
     * @allow (create) Authenticated team member can create a message document.
     * @allow (update) Authenticated team member can update a message document.
     * @allow (delete) Authenticated team member can delete a message document.
     * @deny (get) Unauthenticated user cannot get a message document.
     * @deny (list) Unauthenticated user cannot list messages.
     * @deny (create) Authenticated user cannot create a message document with mismatched teamId.
     * @deny (update) Authenticated user cannot update a message document with mismatched teamId.
     * @deny (delete) Authenticated user cannot delete a message document with mismatched teamId.
     * @principle Enforces team-based access control for all operations.
     */
    match /messages/{messageId} {
      allow get: if isSignedIn() && isTeamMember(resource.data.teamId);
      allow list: if isSignedIn() && isTeamMember(request.query.data.teamId); //Requires teamId query
      allow create: if isSignedIn() && isTeamMember(request.resource.data.teamId);
      allow update: if isSignedIn() && isTeamMember(resource.data.teamId) && isExisting();
      allow delete: if isSignedIn() && isTeamMember(resource.data.teamId) && isExisting();
    }

    /**
     * @description Rule for the /channels collection.
     * @path /channels/{channelId}
     * @allow (get) Authenticated team member can get a channel document.
     * @allow (list) Authenticated team member can list channels.
     * @allow (create) Authenticated team member can create a channel document.
     * @allow (update) Authenticated team member can update a channel document.
     * @allow (delete) Authenticated team member can delete a channel document.
     * @deny (get) Unauthenticated user cannot get a channel document.
     * @deny (list) Unauthenticated user cannot list channels.
     * @deny (create) Authenticated user cannot create a channel document with mismatched teamId.
     * @deny (update) Authenticated user cannot update a channel document with mismatched teamId.
     * @deny (delete) Authenticated user cannot delete a channel document with mismatched teamId.
     * @principle Enforces team-based access control for all operations.
     */
    match /channels/{channelId} {
      allow get: if isSignedIn() && isTeamMember(resource.data.teamId);
      allow list: if isSignedIn() && isTeamMember(request.query.data.teamId); //Requires teamId query
      allow create: if isSignedIn() && isTeamMember(request.resource.data.teamId);
      allow update: if isSignedIn() && isTeamMember(resource.data.teamId) && isExisting();
      allow delete: if isSignedIn() && isTeamMember(resource.data.teamId) && isExisting();
    }

    /**
     * @description Rule for the /webhooks collection.
     * @path /webhooks/{webhookId}
     * @allow (get) Authenticated team member can get a webhook document.
     * @allow (list) Authenticated team member can list webhooks.
     * @allow (create) Authenticated team member can create a webhook document.
     * @allow (update) Authenticated team member can update a webhook document.
     * @allow (delete) Authenticated team member can delete a webhook document.
     * @deny (get) Unauthenticated user cannot get a webhook document.
     * @deny (list) Unauthenticated user cannot list webhooks.
     * @deny (create) Authenticated user cannot create a webhook document with mismatched teamId.
     * @deny (update) Authenticated user cannot update a webhook document with mismatched teamId.
     * @deny (delete) Authenticated user cannot delete a webhook document with mismatched teamId.
     * @principle Enforces team-based access control for all operations.
     */
    match /webhooks/{webhookId} {
      allow get: if isSignedIn() && isTeamMember(resource.data.teamId);
      allow list: if isSignedIn() && isTeamMember(request.query.data.teamId); //Requires teamId query
      allow create: if isSignedIn() && isTeamMember(request.resource.data.teamId);
      allow update: if isSignedIn() && isTeamMember(resource.data.teamId) && isExisting();
      allow delete: if isSignedIn() && isTeamMember(resource.data.teamId) && isExisting();
    }

    /**
     * @description Rule for the /jobs collection.
     * @path /jobs/{jobId}
     * @allow (get) Authenticated team member can get a job document.
     * @allow (list) Authenticated team member can list jobs.
     * @allow (create) Authenticated team member can create a job document.
     * @allow (update) Authenticated team member can update a job document.
     * @allow (delete) Authenticated team member can delete a job document.
     * @deny (get) Unauthenticated user cannot get a job document.
     * @deny (list) Unauthenticated user cannot list jobs.
     * @deny (create) Authenticated user cannot create a job document with mismatched teamId.
     * @deny (update) Authenticated user cannot update a job document with mismatched teamId.
     * @deny (delete) Authenticated user cannot delete a job document with mismatched teamId.
     * @principle Enforces team-based access control for all operations.
     */
    match /jobs/{jobId} {
      allow get: if isSignedIn() && isTeamMember(resource.data.teamId);
      allow list: if isSignedIn() && isTeamMember(request.query.data.teamId); //Requires teamId query
      allow create: if isSignedIn() && isTeamMember(request.resource.data.teamId);
      allow update: if isSignedIn() && isTeamMember(resource.data.teamId) && isExisting();
      allow delete: if isSignedIn() && isTeamMember(resource.data.teamId) && isExisting();
    }

    /**
     * @description Rule for the /socialPosts collection.
     * @path /socialPosts/{socialPostId}
     * @allow (get) Authenticated team member can get a social post document.
     * @allow (list) Authenticated team member can list social posts.
     * @allow (create) Authenticated team member can create a social post document.
     * @allow (update) Authenticated team member can update a social post document.
     * @allow (delete) Authenticated team member can delete a social post document.
     * @deny (get) Unauthenticated user cannot get a social post document.
     * @deny (list) Unauthenticated user cannot list social posts.
     * @deny (create) Authenticated user cannot create a social post document with mismatched teamId.
     * @deny (update) Authenticated user cannot update a social post document with mismatched teamId.
     * @deny (delete) Authenticated user cannot delete a social post document with mismatched teamId.
     * @principle Enforces team-based access control for all operations.
     */
    match /socialPosts/{socialPostId} {
      allow get: if isSignedIn() && isTeamMember(resource.data.teamId);
      allow list: if isSignedIn() && isTeamMember(request.query.data.teamId); //Requires teamId query
      allow create: if isSignedIn() && isTeamMember(request.resource.data.teamId);
      allow update: if isSignedIn() && isTeamMember(resource.data.teamId) && isExisting();
      allow delete: if isSignedIn() && isTeamMember(resource.data.teamId) && isExisting();
    }

    /**
     * @description Rule for the /tasks collection.
     * @path /tasks/{taskId}
     * @allow (get) Authenticated team member can get a task document.
     * @allow (list) Authenticated team member can list tasks.
     * @allow (create) Authenticated team member can create a task document.
     * @allow (update) Authenticated team member can update a task document.
     * @allow (delete) Authenticated team member can delete a task document.
     * @deny (get) Unauthenticated user cannot get a task document.
     * @deny (list) Unauthenticated user cannot list tasks.
     * @deny (create) Authenticated user cannot create a task document with mismatched teamId.
     * @deny (update) Authenticated user cannot update a task document with mismatched teamId.
     * @deny (delete) Authenticated user cannot delete a task document with mismatched teamId.
     * @principle Enforces team-based access control for all operations.
     */
    match /tasks/{taskId} {
      allow get: if isSignedIn() && isTeamMember(resource.data.teamId);
      allow list: if isSignedIn() && isTeamMember(request.query.data.teamId); //Requires teamId query
      allow create: if isSignedIn() && isTeamMember(request.resource.data.teamId);
      allow update: if isSignedIn() && isTeamMember(resource.data.teamId) && isExisting();
      allow delete: if isSignedIn() && isTeamMember(resource.data.teamId) && isExisting();
    }
  }
}