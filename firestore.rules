/**
 * @description This ruleset enforces a strict team-based multi-tenant security model for the HiperFlow CRM application.
 * All data access is scoped to a specific team, identified by `teamId`.
 * @dataStructure The data is organized hierarchically under the `/teams/{teamId}` path. Each subcollection (e.g., `/teams/{teamId}/users/{userId}`, `/teams/{teamId}/companies/{companyId}`) represents entities associated with that team.
 * @keySecurityDecisions
 *  - Access to all data is restricted to authenticated users.
 *  - Users can only access data within their assigned team (i.e., the `teamId` in their authentication token must match the `teamId` of the document).
 *  - List operations are secured to prevent unauthorized access to data from other teams.
 *  - Data validation is relaxed during this prototyping phase, focusing on authorization and relational integrity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to team documents based on team ID.
     * @path /teams/{teamId}
     * @allow (get) Authenticated user can get team data.
     * @deny (create) Unauthorized user cannot create team data.
     * @principle Enforces team-based access control.
     */
    match /teams/{teamId} {
      allow get: if isSignedIn();
      allow list: if false; // Listing teams is not permitted.
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows access to user documents within a team.
     * @path /teams/{teamId}/users/{userId}
     * @allow (get) Authenticated user can get user data within their team.
     * @deny (create) Unauthorized user cannot create user data.
     * @principle Enforces team-based access control for user data.
     */
    match /teams/{teamId}/users/{userId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId) && request.resource.data.id == userId && request.resource.data.teamId == teamId;
      allow update: if isSignedIn() && isTeamMember(teamId) && resource.data.id == request.resource.data.id && resource != null;
      allow delete: if isSignedIn() && isTeamMember(teamId) && resource != null;
    }

    /**
     * @description Allows access to company documents within a team.
     * @path /teams/{teamId}/companies/{companyId}
     * @allow (get) Authenticated user can get company data within their team.
     * @deny (create) Unauthorized user cannot create company data.
     * @principle Enforces team-based access control for company data.
     */
    match /teams/{teamId}/companies/{companyId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId) && request.resource.data.teamId == teamId;
      allow update: if isSignedIn() && isTeamMember(teamId) && resource != null;
      allow delete: if isSignedIn() && isTeamMember(teamId) && resource != null;
    }

    /**
     * @description Allows access to contact documents within a team.
     * @path /teams/{teamId}/contacts/{contactId}
     * @allow (get) Authenticated user can get contact data within their team.
     * @deny (create) Unauthorized user cannot create contact data.
     * @principle Enforces team-based access control for contact data.
     */
    match /teams/{teamId}/contacts/{contactId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId) && request.resource.data.teamId == teamId;
      allow update: if isSignedIn() && isTeamMember(teamId) && resource != null;
      allow delete: if isSignedIn() && isTeamMember(teamId) && resource != null;
    }

    /**
     * @description Allows access to pipeline documents within a team.
     * @path /teams/{teamId}/pipelines/{pipelineId}
     * @allow (get) Authenticated user can get pipeline data within their team.
     * @deny (create) Unauthorized user cannot create pipeline data.
     * @principle Enforces team-based access control for pipeline data.
     */
    match /teams/{teamId}/pipelines/{pipelineId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId) && request.resource.data.teamId == teamId;
      allow update: if isSignedIn() && isTeamMember(teamId) && resource != null;
      allow delete: if isSignedIn() && isTeamMember(teamId) && resource != null;
    }

    /**
     * @description Allows access to stage documents within a pipeline within a team.
     * @path /teams/{teamId}/pipelines/{pipelineId}/stages/{stageId}
     * @allow (get) Authenticated user can get stage data within their team.
     * @deny (create) Unauthorized user cannot create stage data.
     * @principle Enforces team-based access control for stage data.
     */
    match /teams/{teamId}/pipelines/{pipelineId}/stages/{stageId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId) && request.resource.data.pipelineId == pipelineId;
      allow update: if isSignedIn() && isTeamMember(teamId) && resource != null;
      allow delete: if isSignedIn() && isTeamMember(teamId) && resource != null;
    }

    /**
     * @description Allows access to deal documents within a team.
     * @path /teams/{teamId}/deals/{dealId}
     * @allow (get) Authenticated user can get deal data within their team.
     * @deny (create) Unauthorized user cannot create deal data.
     * @principle Enforces team-based access control for deal data.
     */
    match /teams/{teamId}/deals/{dealId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId) && request.resource.data.teamId == teamId;
      allow update: if isSignedIn() && isTeamMember(teamId) && resource != null;
      allow delete: if isSignedIn() && isTeamMember(teamId) && resource != null;
    }

    /**
     * @description Allows access to activity documents within a team.
     * @path /teams/{teamId}/activities/{activityId}
     * @allow (get) Authenticated user can get activity data within their team.
     * @deny (create) Unauthorized user cannot create activity data.
     * @principle Enforces team-based access control for activity data.
     */
    match /teams/{teamId}/activities/{activityId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId) && request.resource.data.teamId == teamId;
      allow update: if isSignedIn() && isTeamMember(teamId) && resource != null;
      allow delete: if isSignedIn() && isTeamMember(teamId) && resource != null;
    }

    /**
     * @description Allows access to message documents within a team.
     * @path /teams/{teamId}/messages/{messageId}
     * @allow (get) Authenticated user can get message data within their team.
     * @deny (create) Unauthorized user cannot create message data.
     * @principle Enforces team-based access control for message data.
     */
    match /teams/{teamId}/messages/{messageId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId) && request.resource.data.teamId == teamId;
      allow update: if isSignedIn() && isTeamMember(teamId) && resource != null;
      allow delete: if isSignedIn() && isTeamMember(teamId) && resource != null;
    }

    /**
     * @description Allows access to channel documents within a team.
     * @path /teams/{teamId}/channels/{channelId}
     * @allow (get) Authenticated user can get channel data within their team.
     * @deny (create) Unauthorized user cannot create channel data.
     * @principle Enforces team-based access control for channel data.
     */
    match /teams/{teamId}/channels/{channelId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId) && request.resource.data.teamId == teamId;
      allow update: if isSignedIn() && isTeamMember(teamId) && resource != null;
      allow delete: if isSignedIn() && isTeamMember(teamId) && resource != null;
    }

    /**
     * @description Allows access to webhook documents within a team.
     * @path /teams/{teamId}/webhooks/{webhookId}
     * @allow (get) Authenticated user can get webhook data within their team.
     * @deny (create) Unauthorized user cannot create webhook data.
     * @principle Enforces team-based access control for webhook data.
     */
    match /teams/{teamId}/webhooks/{webhookId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId) && request.resource.data.teamId == teamId;
      allow update: if isSignedIn() && isTeamMember(teamId) && resource != null;
      allow delete: if isSignedIn() && isTeamMember(teamId) && resource != null;
    }

    /**
     * @description Allows access to job documents within a team.
     * @path /teams/{teamId}/jobs/{jobId}
     * @allow (get) Authenticated user can get job data within their team.
     * @deny (create) Unauthorized user cannot create job data.
     * @principle Enforces team-based access control for job data.
     */
    match /teams/{teamId}/jobs/{jobId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId) && request.resource.data.teamId == teamId;
      allow update: if isSignedIn() && isTeamMember(teamId) && resource != null;
      allow delete: if isSignedIn() && isTeamMember(teamId) && resource != null;
    }

    /**
     * @description Allows access to socialPost documents within a team.
     * @path /teams/{teamId}/socialPosts/{socialPostId}
     * @allow (get) Authenticated user can get socialPost data within their team.
     * @deny (create) Unauthorized user cannot create socialPost data.
     * @principle Enforces team-based access control for socialPost data.
     */
    match /teams/{teamId}/socialPosts/{socialPostId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId) && request.resource.data.teamId == teamId;
      allow update: if isSignedIn() && isTeamMember(teamId) && resource != null;
      allow delete: if isSignedIn() && isTeamMember(teamId) && resource != null;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isTeamMember(teamId) {
        return isSignedIn() && request.auth.uid != null && get(/databases/$(database)/documents/teams/$(teamId)/users/$(request.auth.uid)).data.teamId == teamId;
    }
  }
}