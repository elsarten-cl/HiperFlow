rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Manages access to team documents. Only authenticated users can read or create teams.
     * @path /teams/{teamId}
     * @allow (create) User with valid auth can create a new team.
     * @deny (create) User without auth cannot create a team.
     * @principle Enforces authentication for team creation and restricts updates/deletes.
     */
    match /teams/{teamId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to user documents. Users can only create their own document,
     *              and no one can update or delete user documents.
     * @path /users/{userId}
     * @allow (create) User can create their own user document if the userId matches their auth UID.
     * @deny (create) User cannot create a user document for another user.
     * @principle Enforces user ownership and prevents unauthorized data modification.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to company documents.  Requires authentication and teamId matching.
     * @path /companies/{companyId}
     * @allow (create) Authenticated user can create a company if the teamId matches.
     * @deny (create) User without auth cannot create a company.
     * @principle Enforces team-based access control.
     */
    match /companies/{companyId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages access to contact documents.  Requires authentication.
     * @path /contacts/{contactId}
     * @allow (create) Authenticated user can create a contact.
     * @deny (create) User without auth cannot create a contact.
     * @principle Requires authentication for all operations.
     */
    match /contacts/{contactId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages access to pipeline documents.  Requires authentication.
     * @path /pipelines/{pipelineId}
     * @allow (create) Authenticated user can create a pipeline.
     * @deny (create) User without auth cannot create a pipeline.
     * @principle Requires authentication for all operations.
     */
    match /pipelines/{pipelineId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages access to stage documents within a pipeline. Requires authentication.
     * @path /pipelines/{pipelineId}/stages/{stageId}
     * @allow (create) Authenticated user can create a stage within a pipeline.
     * @deny (create) User without auth cannot create a stage.
     * @principle Requires authentication for all operations.
     */
    match /pipelines/{pipelineId}/stages/{stageId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages access to deal documents. Requires authentication.
     * @path /deals/{dealId}
     * @allow (get) Authenticated user can read a deal.
     * @deny (create) User without auth cannot create a deal.
     * @principle Requires authentication for all operations.
     */
    match /deals/{dealId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages access to activity documents. Requires authentication.
     * @path /activities/{activityId}
     * @allow (create) Authenticated user can create an activity.
     * @deny (create) User without auth cannot create an activity.
     * @principle Requires authentication for all operations.
     */
    match /activities/{activityId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages access to message documents. Requires authentication.
     * @path /messages/{messageId}
     * @allow (create) Authenticated user can create a message.
     * @deny (create) User without auth cannot create a message.
     * @principle Requires authentication for all operations.
     */
    match /messages/{messageId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages access to channel documents. Requires authentication.
     * @path /channels/{channelId}
     * @allow (create) Authenticated user can create a channel.
     * @deny (create) User without auth cannot create a channel.
     * @principle Requires authentication for all operations.
     */
    match /channels/{channelId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages access to webhook documents. Requires authentication.
     * @path /webhooks/{webhookId}
     * @allow (create) Authenticated user can create a webhook.
     * @deny (create) User without auth cannot create a webhook.
     * @principle Requires authentication for all operations.
     */
    match /webhooks/{webhookId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages access to job documents. Requires authentication.
     * @path /jobs/{jobId}
     * @allow (create) Authenticated user can create a job.
     * @deny (create) User without auth cannot create a job.
     * @principle Requires authentication for all operations.
     */
    match /jobs/{jobId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages access to social post documents. Requires authentication.
     * @path /socialPosts/{socialPostId}
     * @allow (create) Authenticated user can create a social post.
     * @deny (create) User without auth cannot create a social post.
     * @principle Requires authentication for all operations.
     */
    match /socialPosts/{socialPostId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages access to task documents. Requires authentication.
     * @path /tasks/{taskId}
     * @allow (create) Authenticated user can create a task.
     * @deny (create) User without auth cannot create a task.
     * @principle Requires authentication for all operations.
     */
    match /tasks/{taskId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}