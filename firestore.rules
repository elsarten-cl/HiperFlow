/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset aims to resolve a permissions issue by flattening the data structure and enforcing team-based access control at the document level.
 * All major entities are stored in root-level collections (e.g., /users, /contacts, /companies) with a `teamId` field for multi-tenancy scoping.
 * @data-structure Root-level collections for all entities. Each document contains a `teamId` field.
 * @key-security-decisions Access control is based on the `teamId` field within each document.  The rules explicitly check if the authenticated user's team ID matches the document's team ID for write operations.
 * Read operations are generally open for prototyping purposes but should be restricted in the production ruleset.
 * User listing is generally disallowed for privacy.
 * @denormalization-for-authorization The `teamId` is denormalized onto every document to allow for efficient team-based access control without requiring additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to Team documents based on team ID.
     * @path /teams/{teamId}
     * @allow (create, update, delete) Authenticated user can modify a team if they are the owner.
     * @deny (create, update, delete) Unauthenticated user cannot modify a team.
     * @principle Enforces document ownership for writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Grants access to User documents based on user ID.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own user document.
     * @deny (create, update, delete) Unauthenticated user cannot create a user.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Grants access to Company documents.
     * @path /companies/{companyId}
     * @allow (create, update, delete) Authenticated user can modify a company if they are in the same team.
     * @deny (create, update, delete) Unauthenticated user cannot modify a company.
     * @principle Enforces team-based access control for writes.
     */
    match /companies/{companyId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Grants access to Contact documents.
     * @path /contacts/{contactId}
     * @allow (create, update, delete) Authenticated user can modify a contact if they are in the same team.
     * @deny (create, update, delete) Unauthenticated user cannot modify a contact.
     * @principle Enforces team-based access control for writes.
     */
    match /contacts/{contactId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Grants access to Pipeline documents.
     * @path /pipelines/{pipelineId}
     * @allow (create, update, delete) Authenticated user can modify a pipeline if they are in the same team.
     * @deny (create, update, delete) Unauthenticated user cannot modify a pipeline.
     * @principle Enforces team-based access control for writes.
     */
    match /pipelines/{pipelineId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Grants access to Stage documents within a Pipeline.
     * @path /pipelines/{pipelineId}/stages/{stageId}
     * @allow (create, update, delete) Authenticated user can modify a stage if they are in the same team as the pipeline.
     * @deny (create, update, delete) Unauthenticated user cannot modify a stage.
     * @principle Enforces team-based access control for writes.
     */
    match /pipelines/{pipelineId}/stages/{stageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Grants access to Deal documents.
     * @path /deals/{dealId}
     * @allow (create, update, delete) Authenticated user can modify a deal if they are in the same team.
     * @deny (create, update, delete) Unauthenticated user cannot modify a deal.
     * @principle Enforces team-based access control for writes.
     */
    match /deals/{dealId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Grants access to Activity documents.
     * @path /activities/{activityId}
     * @allow (create, update, delete) Authenticated user can modify an activity if they are in the same team.
     * @deny (create, update, delete) Unauthenticated user cannot modify an activity.
     * @principle Enforces team-based access control for writes.
     */
    match /activities/{activityId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Grants access to AutomationOutbox documents.
     * @path /automation_outbox/{eventId}
     * @allow (get) Authenticated user can get an AutomationOutbox event.
     * @deny (create, update, delete) No one is allowed to create, update, or delete AutomationOutbox events through the client.
     * @principle Restricts write access to AutomationOutbox.
     */
    match /automation_outbox/{eventId} {
      allow get: if isSignedIn();
      allow list: if false; // No one is allowed to list AutomationOutbox events through the client.
      allow create, update, delete: if false;
    }

    /**
     * @description Grants access to Message documents.
     * @path /messages/{messageId}
     * @allow (create, update, delete) Authenticated user can modify a message if they are in the same team.
     * @deny (create, update, delete) Unauthenticated user cannot modify a message.
     * @principle Enforces team-based access control for writes.
     */
    match /messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Grants access to Channel documents.
     * @path /channels/{channelId}
     * @allow (create, update, delete) Authenticated user can modify a channel if they are in the same team.
     * @deny (create, update, delete) Unauthenticated user cannot modify a channel.
     * @principle Enforces team-based access control for writes.
     */
    match /channels/{channelId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Grants access to Webhook documents.
     * @path /webhooks/{webhookId}
     * @allow (create, update, delete) Authenticated user can modify a webhook if they are in the same team.
     * @deny (create, update, delete) Unauthenticated user cannot modify a webhook.
     * @principle Enforces team-based access control for writes.
     */
    match /webhooks/{webhookId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Grants access to Job documents.
     * @path /jobs/{jobId}
     * @allow (create, update, delete) Authenticated user can modify a job if they are in the same team.
     * @deny (create, update, delete) Unauthenticated user cannot modify a job.
     * @principle Enforces team-based access control for writes.
     */
    match /jobs/{jobId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Grants access to SocialPost documents.
     * @path /socialPosts/{socialPostId}
     * @allow (create, update, delete) Authenticated user can modify a social post if they are in the same team.
     * @deny (create, update, delete) Unauthenticated user cannot modify a social post.
     * @principle Enforces team-based access control for writes.
     */
    match /socialPosts/{socialPostId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Grants access to Task documents.
     * @path /tasks/{taskId}
     * @allow (create, update, delete) Authenticated user can modify a task if they are in the same team.
     * @deny (create, update, delete) Unauthenticated user cannot modify a task.
     * @principle Enforces team-based access control for writes.
     */
    match /tasks/{taskId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Grants access to Automation documents.
     * @path /automations/{automationId}
     * @allow (create, update, delete) Authenticated user can modify an automation if they are in the same team.
     * @deny (create, update, delete) Unauthenticated user cannot modify an automation.
     * @principle Enforces team-based access control for writes.
     */
    match /automations/{automationId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

     /**
     * @description Grants access to ClientProfile documents.
     * @path /clientProfiles/{clientProfileId}
     * @allow (create, update, delete) Authenticated user can modify a client profile if they are the owner.
     * @deny (create, update, delete) Unauthenticated user cannot modify a client profile.
     * @principle Enforces document ownership for writes.
     */
    match /clientProfiles/{clientProfileId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

     /**
      * @description Manages access to DAO proposal documents.
      * @path /dao_proposals/{proposalId}
      * @allow (get, list) Public read access is enabled.
      * @allow (create, update, delete) Only the author can modify.
      * @principle Public read, owner-only write access for DAO proposals.
      */
    match /dao_proposals/{proposalId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
      * @description Manages access to DAO vote documents.
      * @path /dao_votes/{voteId}
      * @allow (create, update, delete) Only the voter can create/modify their vote.
      * @principle Owner-only writes for DAO votes.
      */
    match /dao_votes/{voteId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
      * @description Manages access to DAO decision documents.
      * @path /dao_decisions/{decisionId}
      * @allow (get, list) Public read access is enabled.
      * @allow (create, update, delete) Restrict writes for DAO decisions.
      * @principle Public read, restricted writes for DAO decisions.
      */
    match /dao_decisions/{decisionId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to real-time infrastructure usage metrics.
     * @path /infra_usage/{usageId}
     * @allow (get, list) Public read access is enabled.
     * @allow (create, update, delete) Only authorized services can write.
     * @principle Public read, service-only writes for infrastructure usage.
     */
    match /infra_usage/{usageId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to infrastructure log entries.
     * @path /infra_logs/{logId}
     * @allow (get, list) Public read access is enabled.
     * @allow (create, update, delete) Only authorized services can write.
     * @principle Public read, service-only writes for infrastructure logs.
     */
    match /infra_logs/{logId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}