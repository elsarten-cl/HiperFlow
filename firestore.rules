/**
 * @fileOverview Firestore Security Rules for HiperFlow CRM.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant data model where access is strictly controlled at the team level.
 * All data is scoped to a specific team, and users can only access data within their assigned team.
 *
 * Data Structure:
 * The Firestore database is organized hierarchically, with teams as the root.
 * Data for each entity (users, companies, contacts, etc.) is stored under the corresponding /teams/{teamId} collection.
 *
 * Key Security Decisions:
 * 1.  All writes require a valid, authenticated user.
 * 2.  Data is isolated at the team level using the `teamId` field in each document.
 * 3.  List operations are secured to prevent unauthorized access to data from other teams.
 * 4.  We allow listing of /teams/{teamId}/contacts because they are essential resources.
 *
 * Denormalization for Authorization:
 * All documents that require team-based access include the `teamId` field. This allows security rules to validate a user's access based solely on the `teamId` in their authentication token and the document, without needing `get()` calls to parent documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is on the specified team, comparing against a teamId.
     */
    function isOnTeam(teamId) {
      return isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.teamId == teamId; // Relaxed check during prototyping
    }

    /**
     * @description Checks if the authenticated user is on the specified team, and if the document exists
     */
    function isExistingOwner(teamId) {
      return isOnTeam(teamId) && exists(/databases/$(database)/documents/teams/$(teamId));
    }

    /**
     * @description Rules for the /teams collection.
     * @path /teams/{teamId}
     * @allow (create) - Authenticated user can create a team if the teamId matches their user ID.
     * @deny (create) - Unauthenticated user cannot create a team.
     * @principle Enforces team ownership.
     */
    match /teams/{teamId} {
      allow get: if false;
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.teamId == teamId && request.auth.uid == teamId;
      allow update: if isSignedIn() && request.auth.uid == teamId && request.resource.data.teamId == teamId;
      allow delete: if isSignedIn() && request.auth.uid == teamId;
    }

    /**
     * @description Rules for the /teams/{teamId}/users collection.
     * @path /teams/{teamId}/users/{userId}
     * @allow (create) - Authenticated user can create a user if the teamId matches.
     * @deny (create) - Unauthenticated user cannot create a user.
     * @principle Enforces team-based access.
     */
    match /teams/{teamId}/users/{userId} {
      allow get: if isOwner(userId) && isOnTeam(teamId);
      allow list: if false;

      allow create: if isOwner(userId) && isOnTeam(teamId) && request.resource.data.id == userId && request.resource.data.teamId == teamId;
      allow update: if isOwner(userId) && isOnTeam(teamId) && request.resource.data.id == userId && request.resource.data.teamId == teamId;
      allow delete: if isOwner(userId) && isOnTeam(teamId);
    }

    /**
     * @description Rules for the /teams/{teamId}/companies collection.
     * @path /teams/{teamId}/companies/{companyId}
     * @allow (create) - Authenticated user can create a company if the teamId matches.
     * @deny (create) - Unauthenticated user cannot create a company.
     * @principle Enforces team-based access.
     */
    match /teams/{teamId}/companies/{companyId} {
      allow get: if isOnTeam(teamId);
      allow list: if false;

      allow create: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
      allow update: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
      allow delete: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
    }

    /**
     * @description Rules for the /teams/{teamId}/contacts collection.
     * @path /teams/{teamId}/contacts/{contactId}
     * @allow (create) - Authenticated user can create a contact if the teamId matches.
     * @deny (create) - Unauthenticated user cannot create a contact.
     * @principle Enforces team-based access.
     */
    match /teams/{teamId}/contacts/{contactId} {
      allow get: if isOnTeam(teamId);
      allow list: if false;

      allow create: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
      allow update: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
      allow delete: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
    }

    /**
     * @description Rules for the /teams/{teamId}/pipelines collection.
     * @path /teams/{teamId}/pipelines/{pipelineId}
     * @allow (create) - Authenticated user can create a pipeline if the teamId matches.
     * @deny (create) - Unauthenticated user cannot create a pipeline.
     * @principle Enforces team-based access.
     */
    match /teams/{teamId}/pipelines/{pipelineId} {
      allow get: if isOnTeam(teamId);
      allow list: if false;

      allow create: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
      allow update: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
      allow delete: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
    }

    /**
     * @description Rules for the /teams/{teamId}/pipelines/{pipelineId}/stages collection.
     * @path /teams/{teamId}/pipelines/{pipelineId}/stages/{stageId}
     * @allow (create) - Authenticated user can create a stage if the teamId matches.
     * @deny (create) - Unauthenticated user cannot create a stage.
     * @principle Enforces team-based access.
     */
    match /teams/{teamId}/pipelines/{pipelineId}/stages/{stageId} {
      allow get: if isOnTeam(teamId);
      allow list: if false;

      allow create: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
      allow update: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
      allow delete: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
    }

    /**
     * @description Rules for the /teams/{teamId}/deals collection.
     * @path /teams/{teamId}/deals/{dealId}
     * @allow (create) - Authenticated user can create a deal if the teamId matches.
     * @deny (create) - Unauthenticated user cannot create a deal.
     * @principle Enforces team-based access.
     */
    match /teams/{teamId}/deals/{dealId} {
      allow get: if isOnTeam(teamId);
      allow list: if false;

      allow create: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
      allow update: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
      allow delete: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
    }

    /**
     * @description Rules for the /teams/{teamId}/activities collection.
     * @path /teams/{teamId}/activities/{activityId}
     * @allow (create) - Authenticated user can create an activity if the teamId matches.
     * @deny (create) - Unauthenticated user cannot create an activity.
     * @principle Enforces team-based access.
     */
    match /teams/{teamId}/activities/{activityId} {
      allow get: if isOnTeam(teamId);
      allow list: if false;

      allow create: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
      allow update: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
      allow delete: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
    }

    /**
     * @description Rules for the /teams/{teamId}/messages collection.
     * @path /teams/{teamId}/messages/{messageId}
     * @allow (create) - Authenticated user can create a message if the teamId matches.
     * @deny (create) - Unauthenticated user cannot create a message.
     * @principle Enforces team-based access.
     */
    match /teams/{teamId}/messages/{messageId} {
      allow get: if isOnTeam(teamId);
      allow list: if false;

      allow create: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
      allow update: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
      allow delete: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
    }

    /**
     * @description Rules for the /teams/{teamId}/channels collection.
     * @path /teams/{teamId}/channels/{channelId}
     * @allow (create) - Authenticated user can create a channel if the teamId matches.
     * @deny (create) - Unauthenticated user cannot create a channel.
     * @principle Enforces team-based access.
     */
    match /teams/{teamId}/channels/{channelId} {
      allow get: if isOnTeam(teamId);
      allow list: if false;

      allow create: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
      allow update: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
      allow delete: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
    }

    /**
     * @description Rules for the /teams/{teamId}/webhooks collection.
     * @path /teams/{teamId}/webhooks/{webhookId}
     * @allow (create) - Authenticated user can create a webhook if the teamId matches.
     * @deny (create) - Unauthenticated user cannot create a webhook.
     * @principle Enforces team-based access.
     */
    match /teams/{teamId}/webhooks/{webhookId} {
      allow get: if isOnTeam(teamId);
      allow list: if false;

      allow create: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
      allow update: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
      allow delete: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
    }

    /**
     * @description Rules for the /teams/{teamId}/jobs collection.
     * @path /teams/{teamId}/jobs/{jobId}
     * @allow (create) - Authenticated user can create a job if the teamId matches.
     * @deny (create) - Unauthenticated user cannot create a job.
     * @principle Enforces team-based access.
     */
    match /teams/{teamId}/jobs/{jobId} {
      allow get: if isOnTeam(teamId);
      allow list: if false;

      allow create: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
      allow update: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
      allow delete: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
    }

    /**
     * @description Rules for the /teams/{teamId}/socialPosts collection.
     * @path /teams/{teamId}/socialPosts/{socialPostId}
     * @allow (create) - Authenticated user can create a social post if the teamId matches.
     * @deny (create) - Unauthenticated user cannot create a social post.
     * @principle Enforces team-based access.
     */
    match /teams/{teamId}/socialPosts/{socialPostId} {
      allow get: if isOnTeam(teamId);
      allow list: if false;

      allow create: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
      allow update: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
      allow delete: if isOnTeam(teamId) && request.resource.data.teamId == teamId;
    }
  }
}