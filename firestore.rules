/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a team-based multi-tenancy model.
 * All data is stored in root-level collections (e.g., /teams, /users, /deals).
 * Each document contains a `teamId` field, which is used for scoping data access.
 *
 * Key Security Decisions:
 * - Listing of users is disallowed for privacy.
 * - Default security posture is strict; any access not explicitly granted is denied.
 * - The rules DO NOT validate the full schema of the data being written to allow for rapid prototyping. Only fields critical for authorization are validated.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to team documents.
     * @path /teams/{teamId}
     * @allow (read): Any authenticated user can read a team document.
     * @allow (create): No one can create a team document through client.
     * @deny (update): No one can update a team document through client.
     * @deny (delete): No one can delete a team document through client.
     * @principle Enforces that teams can't be created/modified/deleted directly through the client.
     */
    match /teams/{teamId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Grants access to user documents.
     * @path /users/{userId}
     * @allow (create): A user can create their own document if the userId matches their auth UID.
     * @allow (get): A user can read their own document if the userId matches their auth UID.
     * @deny (list): Listing all users is denied.
     * @deny (update): A user can only update their own document if the userId matches their auth UID.
     * @deny (delete): A user can only delete their own document if the userId matches their auth UID.
     * @principle Enforces user-ownership.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) ;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to company documents based on teamId.
     * @path /companies/{companyId}
     * @allow (read): Any authenticated user can read a company document.
     * @allow (create): Any authenticated user can create a company document.
     * @allow (update): Any authenticated user can update a company document.
     * @allow (delete): Any authenticated user can delete a company document.
     */
    match /companies/{companyId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to contact documents based on teamId.
     * @path /contacts/{contactId}
     * @allow (read): Any authenticated user can read a contact document.
     * @allow (create): Any authenticated user can create a contact document.
     * @allow (update): Any authenticated user can update a contact document.
     * @allow (delete): Any authenticated user can delete a contact document.
     */
    match /contacts/{contactId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to pipeline documents based on teamId.
     * @path /pipelines/{pipelineId}
     * @allow (read): Any authenticated user can read a pipeline document.
     * @allow (create): Any authenticated user can create a pipeline document.
     * @allow (update): Any authenticated user can update a pipeline document.
     * @allow (delete): Any authenticated user can delete a pipeline document.
     */
    match /pipelines/{pipelineId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to stage documents based on pipelineId.
     * @path /stages/{stageId}
     * @allow (read): Any authenticated user can read a stage document.
     * @allow (create): Any authenticated user can create a stage document.
     * @allow (update): Any authenticated user can update a stage document.
     * @allow (delete): Any authenticated user can delete a stage document.
     */
    match /stages/{stageId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to deal documents based on teamId.
     * @path /deals/{dealId}
     * @allow (read): Any authenticated user can read a deal document.
     * @allow (create): Any authenticated user can create a deal document.
     * @allow (update): Any authenticated user can update a deal document.
     * @allow (delete): Any authenticated user can delete a deal document.
     */
    match /deals/{dealId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to activity documents based on teamId.
     * @path /activities/{activityId}
     * @allow (read): Any authenticated user can read an activity document.
     * @allow (create): Any authenticated user can create an activity document.
     * @allow (update): Any authenticated user can update an activity document.
     * @allow (delete): Any authenticated user can delete an activity document.
     */
    match /activities/{activityId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to automation_outbox documents.
     * @path /automation_outbox/{eventId}
     * @allow (read): Any authenticated user can read an automation_outbox document.
     * @allow (create): Any authenticated user can create an automation_outbox document.
     * @allow (update): Any authenticated user can update an automation_outbox document.
     * @allow (delete): Any authenticated user can delete an automation_outbox document.
     */
    match /automation_outbox/{eventId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to message documents based on teamId.
     * @path /messages/{messageId}
     * @allow (read): Any authenticated user can read a message document.
     * @allow (create): Any authenticated user can create a message document.
     * @allow (update): Any authenticated user can update a message document.
     * @allow (delete): Any authenticated user can delete a message document.
     */
    match /messages/{messageId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to channel documents based on teamId.
     * @path /channels/{channelId}
     * @allow (read): Any authenticated user can read a channel document.
     * @allow (create): Any authenticated user can create a channel document.
     * @allow (update): Any authenticated user can update a channel document.
     * @allow (delete): Any authenticated user can delete a channel document.
     */
    match /channels/{channelId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to webhook documents based on teamId.
     * @path /webhooks/{webhookId}
     * @allow (read): Any authenticated user can read a webhook document.
     * @allow (create): Any authenticated user can create a webhook document.
     * @allow (update): Any authenticated user can update a webhook document.
     * @allow (delete): Any authenticated user can delete a webhook document.
     */
    match /webhooks/{webhookId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to job documents based on teamId.
     * @path /jobs/{jobId}
     * @allow (read): Any authenticated user can read a job document.
     * @allow (create): Any authenticated user can create a job document.
     * @allow (update): Any authenticated user can update a job document.
     * @allow (delete): Any authenticated user can delete a job document.
     */
    match /jobs/{jobId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to socialPost documents based on teamId.
     * @path /socialPosts/{socialPostId}
     * @allow (read): Any authenticated user can read a socialPost document.
     * @allow (create): Any authenticated user can create a socialPost document.
     * @allow (update): Any authenticated user can update a socialPost document.
     * @allow (delete): Any authenticated user can delete a socialPost document.
     */
    match /socialPosts/{socialPostId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to task documents based on teamId.
     * @path /tasks/{taskId}
     * @allow (read): Any authenticated user can read a task document.
     * @allow (create): Any authenticated user can create a task document.
     * @allow (update): Any authenticated user can update a task document.
     * @allow (delete): Any authenticated user can delete a task document.
     */
    match /tasks/{taskId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to automation documents based on teamId.
     * @path /automations/{automationId}
     * @allow (read): Any authenticated user can read a automation document.
     * @allow (create): Any authenticated user can create a automation document.
     * @allow (update): Any authenticated user can update a automation document.
     * @allow (delete): Any authenticated user can delete a automation document.
     */
    match /automations/{automationId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to clientProfile documents based on teamId.
     * @path /clientProfiles/{clientProfileId}
     * @allow (read): Any authenticated user can read a clientProfile document.
     * @allow (create): Any authenticated user can create a clientProfile document.
     * @allow (update): Any authenticated user can update a clientProfile document.
     * @allow (delete): Any authenticated user can delete a clientProfile document.
     */
    match /clientProfiles/{clientProfileId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to DAO proposal documents.
     * @path /dao_proposals/{proposalId}
     * @allow (read): Any authenticated user can read a proposal.
     * @allow (create): Any authenticated user can create a proposal.
     * @allow (update): Any authenticated user can update a proposal.
     * @allow (delete): Any authenticated user can delete a proposal.
     */
    match /dao_proposals/{proposalId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to DAO vote documents.
     * @path /dao_votes/{voteId}
     * @allow (read): Any authenticated user can read a vote.
     * @allow (create): Any authenticated user can create a vote.
     * @allow (update): Any authenticated user can update a vote.
     * @allow (delete): Any authenticated user can delete a vote.
     */
    match /dao_votes/{voteId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to DAO decision documents.
     * @path /dao_decisions/{decisionId}
     * @allow (read): Any authenticated user can read a decision.
     * @allow (create): Any authenticated user can create a decision.
     * @allow (update): Any authenticated user can update a decision.
     * @allow (delete): Any authenticated user can delete a decision.
     */
    match /dao_decisions/{decisionId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
    /**
     * @description Grants access to infra usage documents.
     * @path /infra_usage/{usageId}
     * @allow (read): Any authenticated user can read a usage entry.
     * @allow (create): Any authenticated user can create a usage entry.
     * @allow (update): Any authenticated user can update a usage entry.
     * @allow (delete): Any authenticated user can delete a usage entry.
     */
    match /infra_usage/{usageId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to infra log documents.
     * @path /infra_logs/{logId}
     * @allow (read): Any authenticated user can read a log entry.
     * @allow (create): Any authenticated user can create a log entry.
     * @allow (update): Any authenticated user can update a log entry.
     * @allow (delete): Any authenticated user can delete a log entry.
     */
    match /infra_logs/{logId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    // --- Helper Functions ---

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}