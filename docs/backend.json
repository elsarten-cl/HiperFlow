{
  "entities": {
    "Team": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Team",
      "type": "object",
      "description": "Represents a team within the CRM HiperFlow application. Teams enable multi-tenant data scoping.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the team."
        },
        "name": {
          "type": "string",
          "description": "Name of the team."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the team was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the team was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "createdAt",
        "updatedAt"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user within the CRM HiperFlow application. Note: Authentication details are handled by Firebase Authentication and are not stored in this entity.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "teamId": {
          "type": "string",
          "description": "Reference to Team. (Relationship: Team 1:N User).  Specifies the team to which the user belongs."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the user."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the user was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the user was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "teamId",
        "email",
        "createdAt",
        "updatedAt"
      ]
    },
    "Company": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Company",
      "type": "object",
      "description": "Represents a company in the CRM HiperFlow application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the company."
        },
        "teamId": {
          "type": "string",
          "description": "Reference to Team. (Relationship: Team 1:N Company). Specifies the team to which the company belongs."
        },
        "name": {
          "type": "string",
          "description": "Name of the company."
        },
        "website": {
          "type": "string",
          "description": "Website URL of the company.",
          "format": "uri"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the company was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the company was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "teamId",
        "name",
        "createdAt",
        "updatedAt"
      ]
    },
    "Contact": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Contact",
      "type": "object",
      "description": "Represents a contact in the CRM HiperFlow application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the contact."
        },
        "teamId": {
          "type": "string",
          "description": "Reference to Team. (Relationship: Team 1:N Contact). Specifies the team to which the contact belongs."
        },
        "companyId": {
          "type": "string",
          "description": "Reference to Company. (Relationship: Company 1:N Contact).  Specifies the company to which the contact belongs."
        },
        "names": {
          "type": "string",
          "description": "Full name of the contact."
        },
        "emails": {
          "type": "array",
          "description": "Array of email addresses for the contact.",
          "items": {
            "type": "string"
          }
        },
        "phones": {
          "type": "array",
          "description": "Array of phone numbers for the contact.",
          "items": {
            "type": "string"
          }
        },
        "socials": {
          "type": "string",
          "description": "Social media links for the contact."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the contact was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the contact was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "teamId",
        "names",
        "createdAt",
        "updatedAt"
      ]
    },
    "Pipeline": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Pipeline",
      "type": "object",
      "description": "Represents a sales pipeline in the CRM HiperFlow application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the pipeline."
        },
        "teamId": {
          "type": "string",
          "description": "Reference to Team. (Relationship: Team 1:N Pipeline). Specifies the team to which the pipeline belongs."
        },
        "name": {
          "type": "string",
          "description": "Name of the pipeline."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the pipeline was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the pipeline was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "teamId",
        "name",
        "createdAt",
        "updatedAt"
      ]
    },
    "Stage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Stage",
      "type": "object",
      "description": "Represents a stage in a sales pipeline.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the stage."
        },
        "pipelineId": {
          "type": "string",
          "description": "Reference to Pipeline. (Relationship: Pipeline 1:N Stage).  Specifies the pipeline to which the stage belongs."
        },
        "name": {
          "type": "string",
          "description": "Name of the stage."
        },
        "order": {
          "type": "number",
          "description": "Order of the stage within the pipeline."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the stage was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the stage was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "pipelineId",
        "name",
        "order",
        "createdAt",
        "updatedAt"
      ]
    },
    "Deal": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Deal",
      "type": "object",
      "description": "Represents a deal or opportunity in the CRM HiperFlow application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the deal."
        },
        "teamId": {
          "type": "string",
          "description": "Reference to Team. (Relationship: Team 1:N Deal). Specifies the team to which the deal belongs."
        },
        "contactId": {
          "type": "string",
          "description": "Reference to Contact. (Relationship: Contact 1:N Deal). Specifies the contact associated with the deal."
        },
        "stageId": {
          "type": "string",
          "description": "Reference to Stage. (Relationship: Stage 1:N Deal).  Specifies the stage to which the deal currently belongs."
        },
        "name": {
          "type": "string",
          "description": "Name of the deal."
        },
        "value": {
          "type": "number",
          "description": "Value of the deal."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the deal was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the deal was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "teamId",
        "contactId",
        "stageId",
        "name",
        "value",
        "createdAt",
        "updatedAt"
      ]
    },
    "Activity": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Activity",
      "type": "object",
      "description": "Represents an activity or interaction with a contact in the CRM HiperFlow application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the activity."
        },
        "teamId": {
          "type": "string",
          "description": "Reference to Team. (Relationship: Team 1:N Activity). Specifies the team to which the activity belongs."
        },
        "contactId": {
          "type": "string",
          "description": "Reference to Contact. (Relationship: Contact 1:N Activity).  Specifies the contact with whom the activity was performed."
        },
        "dealId": {
          "type": "string",
          "description": "Reference to Deal. (Relationship: Deal 1:N Activity).  Specifies the deal to which the activity is related (optional)."
        },
        "type": {
          "type": "string",
          "description": "Type of activity (e.g., call, email, meeting)."
        },
        "notes": {
          "type": "string",
          "description": "Notes or description of the activity."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the activity was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the activity was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "teamId",
        "contactId",
        "type",
        "notes",
        "createdAt",
        "updatedAt"
      ]
    },
    "Message": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Message",
      "type": "object",
      "description": "Represents a message within the unified inbox of the CRM HiperFlow application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the message."
        },
        "teamId": {
          "type": "string",
          "description": "Reference to Team. (Relationship: Team 1:N Message). Specifies the team to which the message belongs."
        },
        "contactId": {
          "type": "string",
          "description": "Reference to Contact. (Relationship: Contact 1:N Message). Specifies the contact associated with the message."
        },
        "channelId": {
          "type": "string",
          "description": "Reference to Channel. (Relationship: Channel 1:N Message).  Specifies the channel through which the message was sent."
        },
        "content": {
          "type": "string",
          "description": "Content of the message."
        },
        "sentAt": {
          "type": "string",
          "description": "Timestamp indicating when the message was sent.",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the message was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the message was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "teamId",
        "contactId",
        "channelId",
        "content",
        "sentAt",
        "createdAt",
        "updatedAt"
      ]
    },
    "Channel": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Channel",
      "type": "object",
      "description": "Represents a messaging channel (e.g., Meta, WhatsApp) within the CRM HiperFlow application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the channel."
        },
        "teamId": {
          "type": "string",
          "description": "Reference to Team. (Relationship: Team 1:N Channel). Specifies the team to which the channel belongs."
        },
        "name": {
          "type": "string",
          "description": "Name of the channel (e.g., Meta, WhatsApp)."
        },
        "type": {
          "type": "string",
          "description": "Type of channel (e.g., social, messaging)."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the channel was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the channel was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "teamId",
        "name",
        "type",
        "createdAt",
        "updatedAt"
      ]
    },
    "Webhook": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Webhook",
      "type": "object",
      "description": "Represents a webhook configuration for integrating with external services like Make.com or n8n.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the webhook."
        },
        "teamId": {
          "type": "string",
          "description": "Reference to Team. (Relationship: Team 1:N Webhook). Specifies the team to which the webhook belongs."
        },
        "url": {
          "type": "string",
          "description": "URL to which the webhook will send data.",
          "format": "uri"
        },
        "events": {
          "type": "array",
          "description": "Array of event types that trigger the webhook (e.g., contact.created, deal.updated).",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the webhook was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the webhook was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "teamId",
        "url",
        "events",
        "createdAt",
        "updatedAt"
      ]
    },
    "Job": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Job",
      "type": "object",
      "description": "Represents a background job or task within the CRM HiperFlow application, potentially managed by Cloud Tasks.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the job."
        },
        "teamId": {
          "type": "string",
          "description": "Reference to Team. (Relationship: Team 1:N Job). Specifies the team to which the job belongs."
        },
        "type": {
          "type": "string",
          "description": "Type of job (e.g., token refresh, DLQ retry)."
        },
        "status": {
          "type": "string",
          "description": "Status of the job (e.g., pending, running, completed, failed)."
        },
        "payload": {
          "type": "string",
          "description": "Data payload for the job (can be a stringified JSON object)."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the job was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the job was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "teamId",
        "type",
        "status",
        "createdAt",
        "updatedAt"
      ]
    },
    "SocialPost": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SocialPost",
      "type": "object",
      "description": "Represents a social media post scheduled or published through the CRM HiperFlow application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the social post."
        },
        "teamId": {
          "type": "string",
          "description": "Reference to Team. (Relationship: Team 1:N SocialPost). Specifies the team to which the social post belongs."
        },
        "content": {
          "type": "string",
          "description": "Content of the social media post."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the image for the post.",
          "format": "uri"
        },
        "targetPlatform": {
          "type": "string",
          "description": "The social media platform to which the post will be published.",
          "enum": ["Facebook", "Instagram", "LinkedIn", "TikTok"]
        },
        "status": {
            "type": "string",
            "description": "The current status of the social post.",
            "enum": ["draft", "scheduled", "published", "error"]
        },
        "scheduledAt": {
          "type": "string",
          "description": "Timestamp indicating when the post is scheduled to be published.",
          "format": "date-time"
        },
        "publishedAt": {
          "type": "string",
          "description": "Timestamp indicating when the post was actually published.",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the social post was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the social post was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "teamId",
        "content",
        "targetPlatform",
        "status",
        "scheduledAt",
        "createdAt",
        "updatedAt"
      ]
    },
    "Task": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Task",
      "type": "object",
      "description": "Represents a task or to-do item in the Agenda module.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the task."
        },
        "teamId": {
          "type": "string",
          "description": "Reference to Team. Specifies the team to which the task belongs."
        },
        "title": {
          "type": "string",
          "description": "Title or name of the task."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the task."
        },
        "status": {
          "type": "string",
          "description": "Current status of the task.",
          "enum": ["pendiente", "en curso", "completada"]
        },
        "priority": {
          "type": "string",
          "description": "Priority level of the task.",
          "enum": ["baja", "media", "alta"]
        },
        "dueDate": {
          "type": "string",
          "description": "Due date for the task.",
          "format": "date-time"
        },
        "contactId": {
          "type": "string",
          "description": "Optional reference to a Contact."
        },
        "companyId": {
          "type": "string",
          "description": "Optional reference to a Company."
        },
        "dealId": {
          "type": "string",
          "description": "Optional reference to a Deal."
        },
        "assignedTo": {
          "type": "string",
          "description": "User ID of the person responsible for the task."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the task was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the task was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "teamId",
        "title",
        "status",
        "priority",
        "assignedTo",
        "createdAt",
        "updatedAt"
      ]
    },
    "Automation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Automation",
      "type": "object",
      "description": "Represents an automation flow that connects HiperFlow with external services like Make.com or n8n.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the automation."
        },
        "teamId": {
          "type": "string",
          "description": "Reference to Team. Specifies the team to which the automation belongs."
        },
        "name": {
          "type": "string",
          "description": "Descriptive name of the automation flow."
        },
        "platform": {
          "type": "string",
          "description": "The external platform used for this automation.",
          "enum": ["make", "n8n", "other"]
        },
        "status": {
          "type": "string",
          "description": "The current status of the automation.",
          "enum": ["active", "inactive"]
        },
        "webhookUrl": {
          "type": "string",
          "description": "The URL of the external webhook to trigger.",
          "format": "uri"
        },
        "lastRun": {
          "type": "string",
          "description": "Timestamp of the last time this automation was executed.",
          "format": "date-time"
        },
        "lastRunStatus": {
          "type": "string",
          "description": "Status of the last execution.",
          "enum": ["success", "error"]
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the automation was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the automation was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "teamId",
        "name",
        "platform",
        "status",
        "webhookUrl",
        "createdAt",
        "updatedAt"
      ]
    },
    "ClientProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ClientProfile",
      "type": "object",
      "description": "Represents a client's profile for the customer portal.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the client profile, usually linked to a Contact ID."
        },
        "contactId": {
          "type": "string",
          "description": "Reference to the Contact entity."
        },
        "teamId": {
          "type": "string",
          "description": "Reference to the Team entity."
        },
        "theme": {
          "type": "string",
          "description": "Visual theme preference for the portal.",
          "enum": ["light", "dark"]
        },
        "language": {
          "type": "string",
          "description": "Language preference.",
          "enum": ["en", "es"]
        },
        "notifications": {
          "type": "object",
          "properties": {
            "newInvoice": { "type": "boolean" },
            "projectUpdate": { "type": "boolean" }
          }
        },
        "lastLogin": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": ["id", "contactId", "teamId", "createdAt", "updatedAt"]
    },
    "DaoProposal": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DAO Proposal",
      "type": "object",
      "description": "Represents a proposal within the HiperDAO governance module.",
      "properties": {
        "id": { "type": "string", "description": "Unique identifier for the proposal." },
        "authorId": { "type": "string", "description": "User ID of the proposal creator." },
        "title": { "type": "string", "description": "Title of the proposal." },
        "category": { "type": "string", "enum": ["new_module_integration", "economy_rewards_change", "strategic_alliance", "ethical_transparency_rule"] },
        "summary": { "type": "string", "description": "A short summary of the proposal." },
        "status": { "type": "string", "enum": ["draft", "pending_validation", "active_voting", "approved", "rejected", "implemented", "archived"] },
        "createdAt": { "type": "string", "format": "date-time" },
        "votingStartsAt": { "type": "string", "format": "date-time" },
        "votingEndsAt": { "type": "string", "format": "date-time" },
        "tokensStaked": { "type": "number", "description": "Amount of HFT staked by the author." }
      },
      "required": ["id", "authorId", "title", "category", "summary", "status", "createdAt", "votingEndsAt"]
    },
    "DaoVote": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DAO Vote",
      "type": "object",
      "description": "Represents a single vote on a DAO proposal.",
      "properties": {
        "id": { "type": "string", "description": "Unique identifier for the vote." },
        "proposalId": { "type": "string", "description": "Reference to the DAO Proposal." },
        "userId": { "type": "string", "description": "User ID of the voter." },
        "vote": { "type": "string", "enum": ["yes", "no", "abstain"] },
        "tokensUsed": { "type": "number", "description": "Amount of HFT used for voting power." },
        "votedAt": { "type": "string", "format": "date-time" }
      },
      "required": ["id", "proposalId", "userId", "vote", "tokensUsed", "votedAt"]
    },
    "DaoDecision": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DAO Decision",
      "type": "object",
      "description": "Represents the final, audited result of a DAO proposal.",
      "properties": {
        "id": { "type": "string", "description": "Unique identifier for the decision, often same as proposalId." },
        "proposalId": { "type": "string" },
        "result": { "type": "string", "enum": ["approved", "rejected"] },
        "implementationOwner": { "type": "string", "description": "User or team responsible for implementation." },
        "decidedAt": { "type": "string", "format": "date-time" },
        "totalVotes": { "type": "number" },
        "votesFor": { "type": "number" },
        "votesAgainst": { "type": "number" }
      },
      "required": ["id", "proposalId", "result", "decidedAt"]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/teams/{teamId}",
        "definition": {
          "entityName": "Team",
          "schema": {
            "$ref": "#/backend/entities/Team"
          },
          "description": "Represents a team within the CRM. The `teamId` parameter is the unique identifier for the team.",
          "params": [
            {
              "name": "teamId",
              "description": "Unique identifier for the team."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Represents a user. The `userId` is the same as the Firebase Auth UID.",
          "params": [
            {
              "name": "userId",
              "description": "Unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/companies/{companyId}",
        "definition": {
          "entityName": "Company",
          "schema": {
            "$ref": "#/backend/entities/Company"
          },
          "description": "Represents a company.",
          "params": [
            {
              "name": "companyId",
              "description": "Unique identifier for the company."
            }
          ]
        }
      },
      {
        "path": "/contacts/{contactId}",
        "definition": {
          "entityName": "Contact",
          "schema": {
            "$ref": "#/backend/entities/Contact"
          },
          "description": "Represents a contact.",
          "params": [
            {
              "name": "contactId",
              "description": "Unique identifier for the contact."
            }
          ]
        }
      },
      {
        "path": "/pipelines/{pipelineId}",
        "definition": {
          "entityName": "Pipeline",
          "schema": {
            "$ref": "#/backend/entities/Pipeline"
          },
          "description": "Represents a pipeline.",
          "params": [
            {
              "name": "pipelineId",
              "description": "Unique identifier for the pipeline."
            }
          ]
        }
      },
      {
        "path": "/pipelines/{pipelineId}/stages/{stageId}",
        "definition": {
          "entityName": "Stage",
          "schema": {
            "$ref": "#/backend/entities/Stage"
          },
          "description": "Represents a stage in a pipeline.",
          "params": [
            {
              "name": "pipelineId",
              "description": "Unique identifier for the pipeline."
            },
            {
              "name": "stageId",
              "description": "Unique identifier for the stage."
            }
          ]
        }
      },
      {
        "path": "/deals/{dealId}",
        "definition": {
          "entityName": "Deal",
          "schema": {
            "$ref": "#/backend/entities/Deal"
          },
          "description": "Represents a deal.",
          "params": [
            {
              "name": "dealId",
              "description": "Unique identifier for the deal."
            }
          ]
        }
      },
      {
        "path": "/activities/{activityId}",
        "definition": {
          "entityName": "Activity",
          "schema": {
            "$ref": "#/backend/entities/Activity"
          },
          "description": "Represents an activity.",
          "params": [
            {
              "name": "activityId",
              "description": "Unique identifier for the activity."
            }
          ]
        }
      },
      {
        "path": "/messages/{messageId}",
        "definition": {
          "entityName": "Message",
          "schema": {
            "$ref": "#/backend/entities/Message"
          },
          "description": "Represents a message.",
          "params": [
            {
              "name": "messageId",
              "description": "Unique identifier for the message."
            }
          ]
        }
      },
      {
        "path": "/channels/{channelId}",
        "definition": {
          "entityName": "Channel",
          "schema": {
            "$ref": "#/backend/entities/Channel"
          },
          "description": "Represents a channel.",
          "params": [
            {
              "name": "channelId",
              "description": "Unique identifier for the channel."
            }
          ]
        }
      },
      {
        "path": "/webhooks/{webhookId}",
        "definition": {
          "entityName": "Webhook",
          "schema": {
            "$ref": "#/backend/entities/Webhook"
          },
          "description": "Represents a webhook.",
          "params": [
            {
              "name": "webhookId",
              "description": "Unique identifier for the webhook."
            }
          ]
        }
      },
      {
        "path": "/jobs/{jobId}",
        "definition": {
          "entityName": "Job",
          "schema": {
            "$ref": "#/backend/entities/Job"
          },
          "description": "Represents a job.",
          "params": [
            {
              "name": "jobId",
              "description": "Unique identifier for the job."
            }
          ]
        }
      },
      {
        "path": "/socialPosts/{socialPostId}",
        "definition": {
          "entityName": "SocialPost",
          "schema": {
            "$ref": "#/backend/entities/SocialPost"
          },
          "description": "Represents a social post.",
          "params": [
            {
              "name": "socialPostId",
              "description": "Unique identifier for the social post."
            }
          ]
        }
      },
      {
        "path": "/tasks/{taskId}",
        "definition": {
          "entityName": "Task",
          "schema": {
            "$ref": "#/backend/entities/Task"
          },
          "description": "Represents a task in the Agenda module.",
          "params": [
            {
              "name": "taskId",
              "description": "Unique identifier for the task."
            }
          ]
        }
      },
      {
        "path": "/automations/{automationId}",
        "definition": {
          "entityName": "Automation",
          "schema": {
            "$ref": "#/backend/entities/Automation"
          },
          "description": "Represents an automation flow.",
          "params": [
            {
              "name": "automationId",
              "description": "Unique identifier for the automation."
            }
          ]
        }
      },
      {
        "path": "/clientProfiles/{clientProfileId}",
        "definition": {
          "entityName": "ClientProfile",
          "schema": {
            "$ref": "#/backend/entities/ClientProfile"
          },
          "description": "Represents a client's profile for the customer portal.",
          "params": [
            {
              "name": "clientProfileId",
              "description": "Unique identifier for the client profile."
            }
          ]
        }
      },
      {
        "path": "/dao_proposals/{proposalId}",
        "definition": {
          "entityName": "DaoProposal",
          "schema": { "$ref": "#/entities/DaoProposal" },
          "description": "Represents a governance proposal in the HiperDAO.",
          "params": [{ "name": "proposalId", "description": "Unique identifier for the proposal." }]
        }
      },
      {
        "path": "/dao_votes/{voteId}",
        "definition": {
          "entityName": "DaoVote",
          "schema": { "$ref": "#/entities/DaoVote" },
          "description": "Represents a vote on a HiperDAO proposal.",
          "params": [{ "name": "voteId", "description": "Unique identifier for the vote." }]
        }
      },
      {
        "path": "/dao_decisions/{decisionId}",
        "definition": {
          "entityName": "DaoDecision",
          "schema": { "$ref": "#/entities/DaoDecision" },
          "description": "Represents a finalized and audited decision from the HiperDAO.",
          "params": [{ "name": "decisionId", "description": "Unique identifier for the decision." }]
        }
      }
    ],
    "reasoning": "The Firestore data structure has been flattened to use root-level collections for all major entities (e.g., /users, /contacts, /companies). This change is a diagnostic step to resolve a persistent and unusual permissions issue where nested collections under '/teams/{teamId}' were inaccessible despite permissive security rules. By moving collections to the root, we eliminate the complexity of path matching in security rules, simplifying the access control logic. The 'teamId' is retained as a field within each document to maintain data scoping for multi-tenancy, which can be enforced through query constraints in the application logic and eventually in refined security rules. This flattened structure provides a more direct access pattern, which should bypass the suspected underlying issue with rule evaluation on nested paths in the current project environment."
  }
}
